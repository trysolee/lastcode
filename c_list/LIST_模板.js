ROOT.add_LIST('孩子', 'db孩子', {

	DB: 'db孩子', // 系统自动设置

	DB备用: [ // 
		['J', 'db剧本'], // 
	],

	// 默认'NEW'按键 , ( 如果有'NEW' )
	// 按键: ['NEW'] , 
	// 有<按键> 就有 <监听>
	// 
	按键: null, // []

	跳转: ['家长添加'],

	// 根据 JP的结构 , 进行筛选
	筛选byJP: true,
	// '主JP' 默认是全部'列'处理( 在客户端 )
	// 
	// <服务端> 对每个<数据行> 进行判断
	// 

	接收第一个: [ // ---------------------接收第一个 // <服务端>

		['SF_重定位', // 
			'BX', '剧本id', //
			'J', '剧本id', // 重定位目标
			'常串', '数据异常', // 定位失败
		], //

		['SF_等值', // 
			'J', '家庭id', //
			'XD', '$XD_家庭ID', // 
			'常串', '数据异常', // 异常返回串
		], //

		['SF_等值', // 
			'J', '剧本id', //
			'FLYs', 'JPID', //
			'常串', '数据异常', // 异常返回串
		], //

	], // ---------------------------接收第一个 end
	接收每一个: [ // ---------------------接收每一个 // <服务端>

		// 用于 <LIST.上传>
		// 批处理 . .

	], // ---------------------------接收每一个 end
	接收结束: [ // ---------------------接收结束 // <服务端>

		// 用于 <LIST.上传>
		// 批处理 . .

	], // ---------------------------接收结束 end
	筛选: [ // ---------------------筛选
		['MF_孩子空闲', //
			'BX', '孩子id' //
		], //			
		// 每执行一句 , 都检查异常
		// . . 如果异常 , 立即返回
		// 

	], // ---------------------------筛选 end

	顺序: '历史id', // 从小到大

	倒序: '历史id', // 从大到小

	// 默认 有'EDIT' ( 如果有'EDIT' )
	// 默认 有 'DEL' ( 如果有'DEL')
	响应: ['修改存款', '历史列表', //
		'孩子取消任务', '孩子结束任务'
	],

	空集合: [ // 

		['SF_set', // 
			'FLY', 'MSG', '常串', '还没有设置奖品', // 
		], //

	],
});