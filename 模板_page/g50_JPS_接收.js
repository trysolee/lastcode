// <JPS>

// 重要 : 版本号敏感
// . . 对版本号敏不敏感 , 由<编译>时决定
//
// . . S , U , D 对版本号敏感
// S : select 的 <DB> 可能已经被 DEL 或 被修改了
// 所以需对<版本号>敏感
//
// . . I 对版本号不敏感
//
// . . 增加 Sn , Un , Dn ( 不敏感的 S , U , D )

var page模板 = {
	// 
	JP : {

		A : 'D',

		ARR : [ 'C', 'B' ], // 始终敏感
	},//

	// 步骤 :
	// . . 从<JPS池>里面 判断 'D'代表的<JP>是否已经锁定
	// 本身'D'的<主键>就是 <JP.ID>
	// 此时还不需要<DB>操作
	// 
	// > 如果已经锁定
	// . 释放之前锁定的<JP> ( 如果本线程之前有锁定<JP> )
	// . 线程进入等待序列
	// . 并且归还<JPS池>权限
	//
	// > 还没有锁定
	// . 接续锁定其他<JP>
	//
	// > 全部<JP>锁定后 进行下一步
	// . 并且归还<JPS池>权限
	//
	// . . 从<DB_JPS>里面读取 相应的<JP>
	// 判断他们的<版本号> // 与 <JP.用户数据>的比较
	// 1 . 比较 X ( 总版本号 )
	// 2 . 比较 'D' 的版本号
	// . 不敏感的 不用比较
	// 3 . 比较 'C' , 'B' 的版本号
	// . 不敏感的 不用比较
	//
	// . . 比较出现<异常>
	// 解锁全部<JP>
	// 设定<异常.返回>标志

	JP : {
		// 可以没有 <主JP>
		// 因为每个<ARR数据>都包含<JP.ID>

		ARR : [ 'K', ], // db奖品
	},//

// 步骤 :
// . . 从<JPS池>里面 判断 本<JP>是否已经锁定
// 'K' 的 <JP键> 就是 <JP.ID>
// 此时还不需要<DB>操作
//
// . . 其他步骤 同上
}
